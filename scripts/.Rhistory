show_guide = FALSE) +
facet_grid(.~z)
print(A)
}
A <- ggplot(data = data, aes(x = x, y = y)) +
geom_point(size = point_size,
alpha = 0.85,
aes(fill = factor(z)),
colour = "black",
pch = 21,
show_guide = FALSE) +
facet_grid(.~z)
data = data.frame(x = runif(input1[i] + input2[i], max = rect_size),
y = runif(input1[i] + input2[i], max = rect_size),
z = c(rep("A", input1[i], rep("B", input2[i]))
A <- ggplot(data = data, aes(x = x, y = y)) +
geom_point(size = point_size,
alpha = 0.85,
aes(fill = factor(z)),
colour = "black",
pch = 21,
show_guide = FALSE) +
facet_grid(.~z)
rect_size = 10
point_size = 6
input1 = c(552, 552, 602)
input2 = c(1055, 552, 552)
for ( i in 1:3 ){
data = data.frame(x = runif(input1[i] + input2[i], max = rect_size),
y = runif(input1[i] + input2[i], max = rect_size),
z = c(rep("A", input1[i]), rep("B", input2[i]))
A <- ggplot(data = data, aes(x = x, y = y)) +
geom_point(size = point_size,
alpha = 0.85,
aes(fill = factor(z)),
colour = "black",
pch = 21,
show_guide = FALSE) +
facet_grid(.~z)
print(A)
}
data = data.frame(x = runif(input1[i] + input2[i], max = rect_size),
y = runif(input1[i] + input2[i], max = rect_size),
z = c(rep("A", input1[i]), rep("B", input2[i]))
)
rect_size = 10
point_size = 6
input1 = c(552, 552, 602)
input2 = c(1055, 552, 552)
for ( i in 1:3 ){
data = data.frame(x = runif(input1[i] + input2[i], max = rect_size),
y = runif(input1[i] + input2[i], max = rect_size),
z = c(rep("A", input1[i]), rep("B", input2[i])))
A <- ggplot(data = data, aes(x = x, y = y)) +
geom_point(size = point_size,
alpha = 0.85,
aes(fill = factor(z)),
colour = "black",
pch = 21,
show_guide = FALSE) +
facet_grid(.~z)
print(A)
}
input1 = c(552, 552, 602, 2000, 123)
input2 = c(1055, 552, 552, 2200, 100)
for ( i in 1:3 ){
data = data.frame(x = runif(input1[i] + input2[i], max = rect_size),
y = runif(input1[i] + input2[i], max = rect_size),
z = c(rep("A", input1[i]), rep("B", input2[i])))
A <- ggplot(data = data, aes(x = x, y = y)) +
geom_point(size = point_size,
alpha = 0.85,
aes(fill = factor(z)),
colour = "black",
pch = 21,
show_guide = FALSE) +
facet_grid(.~z)
print(A)
}
for ( i in 1:length(input1) ){
data = data.frame(x = runif(input1[i] + input2[i], max = rect_size),
y = runif(input1[i] + input2[i], max = rect_size),
z = c(rep("A", input1[i]), rep("B", input2[i])))
A <- ggplot(data = data, aes(x = x, y = y)) +
geom_point(size = point_size,
alpha = 0.85,
aes(fill = factor(z)),
colour = "black",
pch = 21,
show_guide = FALSE) +
facet_grid(.~z)
print(A)
}
input1 = c(552, 552, 602, 1000, 123)
input2 = c(1055, 552, 552, 1200, 100)
for ( i in 1:length(input1) ){
data = data.frame(x = runif(input1[i] + input2[i], max = rect_size),
y = runif(input1[i] + input2[i], max = rect_size),
z = c(rep("A", input1[i]), rep("B", input2[i])))
A <- ggplot(data = data, aes(x = x, y = y)) +
geom_point(size = point_size,
alpha = 0.85,
aes(fill = factor(z)),
colour = "black",
pch = 21,
show_guide = FALSE) +
facet_grid(.~z)
print(A)
}
input1 = c(552, 553, 602, 1000, 123)
input2 = c(1055, 552, 552, 1200, 100)
for ( i in 1:length(input1) ){
data = data.frame(x = runif(input1[i] + input2[i], max = rect_size),
y = runif(input1[i] + input2[i], max = rect_size),
z = c(rep("A", input1[i]), rep("B", input2[i])))
A <- ggplot(data = data, aes(x = x, y = y)) +
geom_point(size = point_size,
alpha = 0.85,
aes(fill = factor(z)),
colour = "black",
pch = 21,
show_guide = FALSE) +
facet_grid(.~z)
print(A)
}
for ( i in 1:length(input1) ){
data = data.frame(x = runif(input1[i] + input2[i], max = rect_size),
y = runif(input1[i] + input2[i], max = rect_size),
z = c(rep("A", input1[i]), rep("B", input2[i])))
A <- ggplot(data = data, aes(x = x, y = y)) +
geom_point(size = point_size,
alpha = 0.85,
aes(fill = factor(z)),
colour = "black",
pch = 21,
show_guide = FALSE)
print(A)
}
for ( i in 1:length(input1) ){
data = data.frame(x = runif(input1[i] + input2[i], max = rect_size),
y = runif(input1[i] + input2[i], max = rect_size),
z = c(rep("A", input1[i]), rep("B", input2[i])))
A <- ggplot(data = data, aes(x = x, y = y)) +
geom_point(size = point_size,
alpha = 0.85,
colour = "black",
pch = 21,
show_guide = FALSE)
print(A)
}
for ( i in 1:length(input1) ){
data = data.frame(x = runif(input1[i] + input2[i], max = rect_size),
y = runif(input1[i] + input2[i], max = rect_size),
z = c(rep("A", input1[i]), rep("A", input2[i])))
A <- ggplot(data = data, aes(x = x, y = y)) +
geom_point(size = point_size,
alpha = 0.85,
aes(fill = factor(z)),
colour = "black",
pch = 21,
show_guide = FALSE)
print(A)
}
for ( i in 1:length(input1) ){
data = data.frame(x = runif(input1[i] + input2[i], max = rect_size),
y = runif(input1[i] + input2[i], max = rect_size),
z = c(rep("A", input1[i]), rep("A", input2[i])))
A <- ggplot(data = data, aes(x = x, y = y)) +
geom_point(size = point_size,
alpha = 0.85,
aes(fill = factor(z)),
colour = "black",
pch = 21,
show_guide = FALSE)
print(A)
}
plot(x, ppois(x, 1), type = "s", ylab = "F(x)", main = "Poisson(1) CDF")
x <- seq(-0.01, 5, 0.01)
plot(x, ppois(x, 1), type = "s", ylab = "F(x)", main = "Poisson(1) CDF")
x <- rpois(100, 4)
plot(x)
hist(x)
x <- rpois(100, 4)
x = rnorm(10)
y = rnorm(10)
t.test(x,y)
hist(x)
hist(y)
ks.test(x,y)
y = rpois(10)
y = rpois(10, 4)
ks.test(x,y)
y = rgamma(10)
y = rgamma(10, shape=0.4)
ks.test(x,y)
y = rnorm(10)
ks.test(x,y)
ks.test(x,y)
x = rnorm(100)
y = rnorm(100)
ks.test(x,y)
y = rgamma(100, shape=0.4)
ks.test(x,y)
hist(x)
hist(y)
set.seed(42)
N <- 1e4
d <- 10
X <- matrix(rnorm(N*d), ncol=d)
theta <- rep(5, d+1)
eps <- rnorm(N)
y <- cbind(1, X) %*% theta + eps
dat <- data.frame(y=y, x=X)
sgd.theta <- sgd(y ~ ., data=dat, model="lm")
install.packages("sgd")
library("sgd", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
sgd.theta <- sgd(y ~ ., data=dat, model="lm")
sprintf("Mean squared error: %0.3f", mean((theta - as.numeric(sgd.theta$coefficients))^2))
library(sgd)
library(ggplot2)
generate.data <- function(N, d) {
l2 <- function(x) sqrt(sum(x**2))
X <- matrix(rnorm(N*d, mean=0, sd=1/sqrt(N)), nrow=N, ncol=d)
theta <- runif(d)
theta <- theta * 6 *sqrt(d) / l2(theta)
# noise
ind <- rbinom(N, size=1, prob=.95)
epsilon <- ind * rnorm(N) + (1-ind) * rep(10 ,N)
Y <- X %*% theta + epsilon
return(list(y=Y, X=X, theta=theta))
}
# Dimensions
N <- 1000
d <- 200
set.seed(42)
data <- generate.data(N, d)
dat <- data.frame(y=data$y, x=data$X)
sgd.theta <- sgd(y ~ .-1, data=dat, model="m", sgd.control=list(method="sgd",
lr.control=c(15, NA, NA, 1/2), npass=10, pass=T))
sgd.theta <- sgd(y ~ .-1, data=dat, sgd.control=list(method="sgd",
lr.control=c(15, NA, NA, 1/2), npass=10, pass=T))
sgd.theta <- sgd(y ~ .-1, data=dat, model="m", sgd.control=list(method="sgd",
lr.control=c(15, NA, NA, 1/2), npass=10, pass=T))
sgd.theta <- sgd(y ~ .-1, data=dat, model="gmm", sgd.control=list(method="sgd",
lr.control=c(15, NA, NA, 1/2), npass=10, pass=T))
sgd.theta <- sgd(y ~ .-1, data=dat, model="lm", sgd.control=list(method="sgd",
lr.control=c(15, NA, NA, 1/2), npass=10, pass=T))
plot(sgd.theta, data$theta, label="sgd", type="mse-param") +
geom_hline(yintercept=1.5, color="green")
sgd.theta
data$theta
sgd.theta <- sgd(y ~ .-1, data=dat, model="m", sgd.control=list(method="sgd",
lr.control=c(15, NA, NA, 1/2), npass=10, pass=T))
sgd.theta <- sgd(y ~ .-1, data=dat, model="glm", sgd.control=list(method="sgd",
lr.control=c(15, NA, NA, 1/2), npass=10, pass=T))
plot(sgd.theta, data$theta, label="sgd", type="mse-param") +
geom_hline(yintercept=1.5, color="green")
plot(dat)
View(dat)
library(sgd)
N <- 1e3
d <- 2
theta <- c(4, 2)
# Generate data.
set.seed(42)
X <- matrix(rnorm(N, mean=theta[1], sd=theta[2]), ncol=1)
# Gradient of moment function (using 3 moments)
gr <- function(theta, x) {
return(as.matrix(c(
mean(2*(theta[1] - x) +
2*(theta[2]^2 - (x - theta[1])^2) * 2*(-theta[1] +x) +
2*(x^3 - theta[1]*(theta[1]^2 + 3*theta[2]^2)) * (-3*theta[1]^2 -
3*theta[2]^2)),
mean(0 +
2*(theta[2]^2 - (x - theta[1])^2) * 2*theta[2] +
2*(x^3 - theta[1]*(theta[1]^2 + 3*theta[2]^2)) * -6*theta[1]*theta[2])
)))
}
sgd.theta <- sgd(X, y=matrix(NA, nrow=nrow(X)), model="gmm",
model.control=list(gr=gr, nparams=2),
sgd.control=list(method="sgd", npasses=100, lr="adagrad"))
sgd.theta <- sgd(X, y=matrix(NA, nrow=nrow(X)), model="glm",
model.control=list(gr=gr, nparams=2),
sgd.control=list(method="sgd", npasses=100, lr="adagrad"))
sgd.theta <- sgd(X, y=matrix(NA, nrow=nrow(X)), model="gmm",
model.control=list(gr=gr, nparams=2),
sgd.control=list(method="sgd", npasses=100, lr="adagrad"))
library(sgd)
# Dimensions
N <- 1e3
d <- 2
theta <- c(4, 2)
# Generate data.
set.seed(42)
X <- matrix(rnorm(N, mean=theta[1], sd=theta[2]), ncol=1)
sgd.theta <- sgd(X, y=matrix(NA, nrow=nrow(X)))
sgd.theta <- sgd(X, y=matrix(NA, nrow=nrow(X)), model="m")
sgd.theta <- sgd(X, y=matrix(NA, nrow=nrow(X)), model="lm")
sgd.theta <- sgd(X, y=matrix(NA, nrow=nrow(X)), model="glm")
matrix(NA, nrow=nrow(X))
N <- 1e5
d <- 1e2
# Generate data.
X <- matrix(rnorm(N*d), ncol=d)
theta <- rep(5, d+1)
eps <- rnorm(N)
y <- cbind(1, X) %*% theta + eps
dat <- data.frame(y=y, x=X)
sgd.theta <- sgd(y ~ ., data=dat, model="lm")
sgd.theta
sgd.theta$coefficients
sgd.theta$linear.predictors
sgd.theta$converged
sgd.theta$df.residual
rep(5)
rep(1)
rep(1, 2)
rep(1, 5)
N <- 1e1
d <- 1e1
# Generate data.
X <- matrix(rnorm(N*d), ncol=d)
theta <- rep(5, d+1)
eps <- rnorm(N)
y <- cbind(1, X) %*% theta + eps
dat <- data.frame(y=y, x=X)
sgd.theta <- sgd(y ~ ., data=dat, model="lm")
sgd.theta
View(dat)
View(y)
View(dat)
y ~ .
cbind(1, X)
X
cbind(1, X) %*% theta
cbind(1, X) %*% theta
x <- y ~ .
x
x(7)
class(fo <- y ~ x1*x2)
dat(y)
dat[y]
dat[y][:]
dat
head(dat)
dat
dat["y"]
sgd.theta <- sgd(z ~ ., data=dat, model="lm")
sgd.theta <- sgd(y ~ ., data=dat, model="lm")
dat2 <- data.frame(x=X)
sgd.theta <- sgd(dat2, model="lm")
sgd.theta <- sgd(data=dat2, model="lm")
sgd.theta <- sgd(y,X, model="lm")
sgd.theta <- sgd(X,Y, model="lm")
sgd.theta <- sgd(X,y, model="lm")
demo(package="sgd")
linear-regression
demo(package="sgd",topic="linear-regression")
N <- 1e1
d <- 1e1
# Generate data.
X <- matrix(rnorm(N*d), ncol=d)
theta <- rep(5, d+1)
eps <- rnorm(N)
y <- cbind(1, X) %*% theta + eps
dat <- data.frame(y=y, x=X)
sgd.theta <- sgd(y ~ ., data=dat, model="glm")
sgd.theta
View(dat)
sgd.theta$converged
sgd.theta$fitted.values
sgd.theta$null.deviance
sgd.theta$family
X <- matrix(rpois(N*d), ncol=d)
X <- matrix(rpois(N*d, 5), ncol=d)
theta <- rep(5, d+1)
eps <- rnorm(N)
y <- cbind(1, X) %*% theta + eps
dat <- data.frame(y=y, x=X)
sgd.theta <- sgd(y ~ ., data=dat, model="glm")
sgd.theta$family
sgd.theta
View(dat)
sgd.theta <- sgd(y ~ ., data=dat, model="lm")
N <- 1e1
d <- 1e1
# Generate data.
X <- matrix(rpois(N*d, 5), ncol=d)
theta <- rep(5, d+1)
eps <- rnorm(N)
y <- cbind(1, X) %*% theta + eps
dat <- data.frame(y=y, x=X)
sgd.theta <- sgd(y ~ ., data=dat, model="lm")
library("sgd", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
sgd.theta <- sgd(y ~ ., data=dat, model="lm")
sgd.theta
sgd.theta <- sgd(y ~ ., data=dat, model="mm")
install.packages("densratio")
version()
version
install.packages("densration")
-5.48366581e+00
setwd("/Users/wasnio/Documents/pdm/scripts")
data <- csv.read(file="ch-2-data.dat", header=FALSE)
data <- read.csv(file="ch-2-data.dat", header=FALSE)
plot(data$V, type="lines", col="blue",
plot(data$V1, type="lines", col="blue",
,xlab="Odczyt czujnika"
,ylab="Wartosci"
)
data <- read.csv(file="ch-2-data.dat", header=FALSE)
plot(data$V1, type="lines", col="blue",
,xlab="Odczyt czujnika"
,ylab="Wartosci"
)
data <- read.csv(file="ch-2-data-res.dat", header=FALSE)
data <- read.csv(file="ch-2-dat-res.dat", header=FALSE)
plot(data$V1, type="lines", col="blue",
,xlab="Odczyt czujnika"
,ylab="Wartosci"
)
plot(input$V1, type="lines", col="blue",
,xlab="Odczyt czujnika"
,ylab="Wartosci"
)
input <- read.csv(file="ch-2-data.dat", header=FALSE)
ouput <- read.csv(file="ch-2-dat-res.dat", header=FALSE)
plot(input$V1, type="lines", col="blue",
,xlab="Odczyt czujnika"
,ylab="Wartosci"
)
par(new=TRUE)
plot(ouput$V1, type="lines", col="red",
,xlab="Odczyt czujnika"
,ylab="Wartosci"
)
par(mfrow=c(2,1))
plot(input$V1, type="lines", col="blue",
,xlab="Odczyt czujnika"
,ylab="Wartosci"
)
par(new=TRUE)
plot(ouput$V1, type="lines", col="red",
,xlab="Odczyt czujnika"
,ylab="Wartosci"
)
par(mfrow=c(2,1))
plot(input$V1, type="lines", col="blue",
,xlab="Odczyt czujnika"
,ylab="Wartosci"
)
par(new=TRUE)
plot(ouput$V1, type="lines", col="red",
,xlab="Odczyt czujnika"
,ylab="Wartosci"
)
par(mfrow=c(2,2))
plot(input$V1, type="lines", col="blue",
,xlab="Odczyt czujnika"
,ylab="Wartosci"
)
plot(ouput$V1, type="lines", col="red",
,xlab="Odczyt czujnika"
,ylab="Wartosci"
)
par(mfrow=c(2,1))
plot(input$V1, type="lines", col="blue",
,xlab="Odczyt czujnika"
,ylab="Wartosci"
)
plot(ouput$V1, type="lines", col="red",
,xlab="Odczyt czujnika"
,ylab="Wartosci"
)
setEPS()
postscript("ch-2-change.eps")
par(mfrow=c(2,1))
plot(input$V1, type="lines", col="blue",
,xlab="Odczyt czujnika"
,ylab="Wartosci"
)
plot(ouput$V1, type="lines", col="red",
,xlab="Odczyt czujnika"
,ylab="Wartosci"
)
dev.off()
setEPS()
postscript("ch-2-change.eps")
par(mfrow=c(2,1))
plot(input$V1, type="lines", col="blue",
,xlab="Odczyt czujnika"
,ylab="Wartosci"
)
plot(ouput$V1, type="lines", col="red",
,xlab="Miara wystapienia zmiany"
,ylab=""
)
dev.off()
setEPS()
postscript("ch-2-data.eps")
plot(input$V1, type="lines", col="blue",
,xlab="Odczyt czujnika"
,ylab="Wartosci"
)
dev.off()
setEPS()
postscript("ch-2-data.eps")
plot(input$V1, type="lines", col="blue",
,xlab="Odczyt czujnika"
,ylab="Wartosci"
)
dev.off()
